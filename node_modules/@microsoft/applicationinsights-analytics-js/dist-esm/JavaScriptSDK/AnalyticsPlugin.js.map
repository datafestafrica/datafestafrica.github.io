{"version":3,"file":"AnalyticsPlugin.js.map","sources":["AnalyticsPlugin.js"],"sourcesContent":["/**\r\n * ApplicationInsights.ts\r\n * @copyright Microsoft 2018\r\n */\r\nimport { __assign, __extends } from \"tslib\";\r\nimport { PageViewPerformance, PageView, RemoteDependencyData, Event as EventTelemetry, createTelemetryItem, Metric, Exception, Trace, PropertiesPluginIdentifier, AnalyticsPluginIdentifier, stringToBoolOrDefault, createDomEvent, strNotSpecified, isCrossOriginError, utlDisableStorage, utlEnableStorage, dataSanitizeString } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, getWindow, getDocument, getHistory, getLocation, objForEachKey, isString, isFunction, isNullOrUndefined, arrForEach, generateW3CId, dumpObj, getExceptionName, safeGetCookieMgr, hasHistory, strUndefined, objDefineAccessors, InstrumentEvent, eventOn, eventOff, mergeEvtNamespace, createUniqueNamespace, throwError, isUndefined, hasWindow, createProcessTelemetryContext } from \"@microsoft/applicationinsights-core-js\";\r\nimport { PageViewManager } from \"./Telemetry/PageViewManager\";\r\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\r\nimport { PageViewPerformanceManager } from \"./Telemetry/PageViewPerformanceManager\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { Timing } from \"./Timing\";\r\n\"use strict\";\r\nvar durationProperty = \"duration\";\r\nvar strEvent = \"event\";\r\nfunction _dispatchEvent(target, evnt) {\r\n    if (target && target.dispatchEvent && evnt) {\r\n        target.dispatchEvent(evnt);\r\n    }\r\n}\r\nfunction _getReason(error) {\r\n    if (error && error.reason) {\r\n        var reason = error.reason;\r\n        if (!isString(reason) && isFunction(reason.toString)) {\r\n            return reason.toString();\r\n        }\r\n        return dumpObj(reason);\r\n    }\r\n    // Pass the original object down which will eventually get evaluated for any message or description\r\n    return error || \"\";\r\n}\r\nvar MinMilliSeconds = 60000;\r\nfunction _configMilliseconds(value, defValue) {\r\n    value = value || defValue;\r\n    if (value < MinMilliSeconds) {\r\n        value = MinMilliSeconds;\r\n    }\r\n    return value;\r\n}\r\nfunction _getDefaultConfig(config) {\r\n    if (!config) {\r\n        config = {};\r\n    }\r\n    // set default values\r\n    config.sessionRenewalMs = _configMilliseconds(config.sessionRenewalMs, 30 * 60 * 1000);\r\n    config.sessionExpirationMs = _configMilliseconds(config.sessionExpirationMs, 24 * 60 * 60 * 1000);\r\n    config.disableExceptionTracking = stringToBoolOrDefault(config.disableExceptionTracking);\r\n    config.autoTrackPageVisitTime = stringToBoolOrDefault(config.autoTrackPageVisitTime);\r\n    config.overridePageViewDuration = stringToBoolOrDefault(config.overridePageViewDuration);\r\n    config.enableUnhandledPromiseRejectionTracking = stringToBoolOrDefault(config.enableUnhandledPromiseRejectionTracking);\r\n    if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {\r\n        config.samplingPercentage = 100;\r\n    }\r\n    config.isStorageUseDisabled = stringToBoolOrDefault(config.isStorageUseDisabled);\r\n    config.isBrowserLinkTrackingEnabled = stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);\r\n    config.enableAutoRouteTracking = stringToBoolOrDefault(config.enableAutoRouteTracking);\r\n    config.namePrefix = config.namePrefix || \"\";\r\n    config.enableDebug = stringToBoolOrDefault(config.enableDebug);\r\n    config.disableFlushOnBeforeUnload = stringToBoolOrDefault(config.disableFlushOnBeforeUnload);\r\n    config.disableFlushOnUnload = stringToBoolOrDefault(config.disableFlushOnUnload, config.disableFlushOnBeforeUnload);\r\n    return config;\r\n}\r\nfunction _updateStorageUsage(extConfig) {\r\n    // Not resetting the storage usage as someone may have manually called utlDisableStorage, so this will only\r\n    // reset based if the configuration option is provided\r\n    if (!isUndefined(extConfig.isStorageUseDisabled)) {\r\n        if (extConfig.isStorageUseDisabled) {\r\n            utlDisableStorage();\r\n        }\r\n        else {\r\n            utlEnableStorage();\r\n        }\r\n    }\r\n}\r\nvar AnalyticsPlugin = /** @class */ (function (_super) {\r\n    __extends(AnalyticsPlugin, _super);\r\n    function AnalyticsPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = AnalyticsPluginIdentifier; // do not change name or priority\r\n        _this.priority = 180; // take from reserved priority range 100- 200\r\n        _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\r\n        var _eventTracking;\r\n        var _pageTracking;\r\n        var _pageViewManager;\r\n        var _pageViewPerformanceManager;\r\n        var _pageVisitTimeManager;\r\n        var _preInitTelemetryInitializers;\r\n        var _isBrowserLinkTrackingEnabled;\r\n        var _browserLinkInitializerAdded;\r\n        var _enableAutoRouteTracking;\r\n        var _historyListenerAdded;\r\n        var _disableExceptionTracking;\r\n        var _autoExceptionInstrumented;\r\n        var _enableUnhandledPromiseRejectionTracking;\r\n        var _autoUnhandledPromiseInstrumented;\r\n        // Counts number of trackAjax invocations.\r\n        // By default we only monitor X ajax call per view to avoid too much load.\r\n        // Default value is set in config.\r\n        // This counter keeps increasing even after the limit is reached.\r\n        var _trackAjaxAttempts = 0;\r\n        // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n        var _prevUri; // Assigned in the constructor\r\n        var _currUri;\r\n        var _evtNamespace;\r\n        dynamicProto(AnalyticsPlugin, _this, function (_self, _base) {\r\n            var _addHook = _base._addHook;\r\n            _initDefaults();\r\n            _self.getCookieMgr = function () {\r\n                return safeGetCookieMgr(_self.core);\r\n            };\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n            _self.trackEvent = function (event, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(event, EventTelemetry.dataType, EventTelemetry.envelopeType, _self.diagLog(), customProperties);\r\n                    _self.core.track(telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* WARNING */, 39 /* TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n             * @param   name    A string that identifies this event uniquely within the document.\r\n             */\r\n            _self.startTrackEvent = function (name) {\r\n                try {\r\n                    _eventTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* CRITICAL */, 29 /* StartTrackEventFailed */, \"startTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Log an extended event that you started timing with `startTrackEvent`.\r\n             * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n             * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n             * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackEvent = function (name, properties, measurements) {\r\n                try {\r\n                    _eventTracking.stop(name, undefined, properties); // Todo: Fix to pass measurements once type is updated\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* CRITICAL */, 30 /* StopTrackEventFailed */, \"stopTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a diagnostic message\r\n             * @param {ITraceTelemetry} trace\r\n             * @param ICustomProperties.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackTrace = function (trace, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(trace, Trace.dataType, Trace.envelopeType, _self.diagLog(), customProperties);\r\n                    _self.core.track(telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* WARNING */, 39 /* TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a numeric value that is not associated with a specific event. Typically\r\n             * used to send regular reports of performance indicators. To send single measurement, just\r\n             * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n             * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n             * and sending the resulting average at intervals\r\n             * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.\r\n             * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the\r\n             * portal. Defaults to empty.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackMetric = function (metric, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(metric, Metric.dataType, Metric.envelopeType, _self.diagLog(), customProperties);\r\n                    _self.core.track(telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* CRITICAL */, 36 /* TrackMetricFailed */, \"trackMetric failed, metric will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Logs that a page or other item was viewed.\r\n             * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param customProperties Additional data used to filter events and metrics. Defaults to empty.\r\n             * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n             */\r\n            _self.trackPageView = function (pageView, customProperties) {\r\n                try {\r\n                    var inPv = pageView || {};\r\n                    _pageViewManager.trackPageView(inPv, __assign(__assign(__assign({}, inPv.properties), inPv.measurements), customProperties));\r\n                    if (_self.config.autoTrackPageVisitTime) {\r\n                        _pageVisitTimeManager.trackPreviousPageVisit(inPv.name, inPv.uri);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* CRITICAL */, 37 /* TrackPVFailed */, \"trackPageView failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n             * @param pageView Page view item to be sent\r\n             * @param properties Custom properties (Part C) that a user can add to the telemetry item\r\n             * @param systemProperties System level properties (Part A) that a user can add to the telemetry item\r\n             */\r\n            _self.sendPageViewInternal = function (pageView, properties, systemProperties) {\r\n                var doc = getDocument();\r\n                if (doc) {\r\n                    pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;\r\n                }\r\n                var telemetryItem = createTelemetryItem(pageView, PageView.dataType, PageView.envelopeType, _self.diagLog(), properties, systemProperties);\r\n                _self.core.track(telemetryItem);\r\n                // reset ajaxes counter\r\n                _trackAjaxAttempts = 0;\r\n            };\r\n            /**\r\n             * @ignore INTERNAL ONLY\r\n             * @param pageViewPerformance\r\n             * @param properties\r\n             */\r\n            _self.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {\r\n                var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance.dataType, PageViewPerformance.envelopeType, _self.diagLog(), properties, systemProperties);\r\n                _self.core.track(telemetryItem);\r\n            };\r\n            /**\r\n             * Send browser performance metrics.\r\n             * @param pageViewPerformance\r\n             * @param customProperties\r\n             */\r\n            _self.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n                var inPvp = pageViewPerformance || {};\r\n                try {\r\n                    _pageViewPerformanceManager.populatePageViewPerformanceEvent(inPvp);\r\n                    _self.sendPageViewPerformanceInternal(inPvp, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* CRITICAL */, 37 /* TrackPVFailed */, \"trackPageViewPerformance failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n             * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n             * and send the event.\r\n             * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n             */\r\n            _self.startTrackPage = function (name) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    _pageTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* CRITICAL */, 31 /* StartTrackFailed */, \"startTrackPage failed, page view may not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n             * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n             * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n             * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackPage = function (name, url, properties, measurement) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    if (typeof url !== \"string\") {\r\n                        var loc = getLocation();\r\n                        url = loc && loc.href || \"\";\r\n                    }\r\n                    _pageTracking.stop(name, url, properties, measurement);\r\n                    if (_self.config.autoTrackPageVisitTime) {\r\n                        _pageVisitTimeManager.trackPreviousPageVisit(name, url);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* CRITICAL */, 32 /* StopTrackFailed */, \"stopTrackPage failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n            * @ignore INTERNAL ONLY\r\n            * @param exception\r\n            * @param properties\r\n            * @param systemProperties\r\n            */\r\n            _self.sendExceptionInternal = function (exception, customProperties, systemProperties) {\r\n                var theError = exception.exception || exception.error || new Error(strNotSpecified);\r\n                var exceptionPartB = new Exception(_self.diagLog(), theError, exception.properties || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();\r\n                var telemetryItem = createTelemetryItem(exceptionPartB, Exception.dataType, Exception.envelopeType, _self.diagLog(), customProperties, systemProperties);\r\n                _self.core.track(telemetryItem);\r\n            };\r\n            /**\r\n             * Log an exception you have caught.\r\n             *\r\n             * @param {IExceptionTelemetry} exception   Object which contains exception to be sent\r\n             * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             *\r\n             * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackException = function (exception, customProperties) {\r\n                if (exception && !exception.exception && exception.error) {\r\n                    exception.exception = exception.error;\r\n                }\r\n                try {\r\n                    _self.sendExceptionInternal(exception, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* CRITICAL */, 35 /* TrackExceptionFailed */, \"trackException failed, exception will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Custom error handler for Application Insights Analytics\r\n             * @param {IAutoExceptionTelemetry} exception\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self._onerror = function (exception) {\r\n                var error = exception && exception.error;\r\n                var evt = exception && exception.evt;\r\n                try {\r\n                    if (!evt) {\r\n                        var _window = getWindow();\r\n                        if (_window) {\r\n                            evt = _window[strEvent];\r\n                        }\r\n                    }\r\n                    var url = (exception && exception.url) || (getDocument() || {}).URL;\r\n                    // If no error source is provided assume the default window.onerror handler\r\n                    var errorSrc = exception.errorSrc || \"window.onerror@\" + url + \":\" + (exception.lineNumber || 0) + \":\" + (exception.columnNumber || 0);\r\n                    var properties = {\r\n                        errorSrc: errorSrc,\r\n                        url: url,\r\n                        lineNumber: exception.lineNumber || 0,\r\n                        columnNumber: exception.columnNumber || 0,\r\n                        message: exception.message\r\n                    };\r\n                    if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception.error)) {\r\n                        _sendCORSException(Exception.CreateAutoException(\"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\", url, exception.lineNumber || 0, exception.columnNumber || 0, error, evt, null, errorSrc), properties);\r\n                    }\r\n                    else {\r\n                        if (!exception.errorSrc) {\r\n                            exception.errorSrc = errorSrc;\r\n                        }\r\n                        _self.trackException({ exception: exception, severityLevel: 3 /* Error */ }, properties);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    var errorString = error ? (error.name + \", \" + error.message) : \"null\";\r\n                    _throwInternal(1 /* CRITICAL */, 11 /* ExceptionWhileLoggingError */, \"_onError threw exception while logging error, error will not be collected: \"\r\n                        + getExceptionName(e), { exception: dumpObj(e), errorString: errorString });\r\n                }\r\n            };\r\n            _self.addTelemetryInitializer = function (telemetryInitializer) {\r\n                if (_self.core) {\r\n                    // Just add to the core\r\n                    return _self.core.addTelemetryInitializer(telemetryInitializer);\r\n                }\r\n                // Handle \"pre-initialization\" telemetry initializers (for backward compatibility)\r\n                if (!_preInitTelemetryInitializers) {\r\n                    _preInitTelemetryInitializers = [];\r\n                }\r\n                _preInitTelemetryInitializers.push(telemetryInitializer);\r\n            };\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (_self.isInitialized()) {\r\n                    return;\r\n                }\r\n                if (isNullOrUndefined(core)) {\r\n                    throwError(\"Error initializing\");\r\n                }\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                try {\r\n                    _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                    if (_preInitTelemetryInitializers) {\r\n                        arrForEach(_preInitTelemetryInitializers, function (initializer) {\r\n                            core.addTelemetryInitializer(initializer);\r\n                        });\r\n                        _preInitTelemetryInitializers = null;\r\n                    }\r\n                    var extConfig = _populateDefaults(config);\r\n                    _updateStorageUsage(extConfig);\r\n                    _pageViewPerformanceManager = new PageViewPerformanceManager(_self.core);\r\n                    _pageViewManager = new PageViewManager(_this, extConfig.overridePageViewDuration, _self.core, _pageViewPerformanceManager);\r\n                    _pageVisitTimeManager = new PageVisitTimeManager(_self.diagLog(), function (pageName, pageUrl, pageVisitTime) { return trackPageVisitTime(pageName, pageUrl, pageVisitTime); });\r\n                    _updateBrowserLinkTracking(extConfig, config);\r\n                    _eventTracking = new Timing(_self.diagLog(), \"trackEvent\");\r\n                    _eventTracking.action =\r\n                        function (name, url, duration, properties) {\r\n                            if (!properties) {\r\n                                properties = {};\r\n                            }\r\n                            properties[durationProperty] = duration.toString();\r\n                            _self.trackEvent({ name: name, properties: properties });\r\n                        };\r\n                    // initialize page view timing\r\n                    _pageTracking = new Timing(_self.diagLog(), \"trackPageView\");\r\n                    _pageTracking.action = function (name, url, duration, properties, measurements) {\r\n                        // duration must be a custom property in order for the collector to extract it\r\n                        if (isNullOrUndefined(properties)) {\r\n                            properties = {};\r\n                        }\r\n                        properties[durationProperty] = duration.toString();\r\n                        var pageViewItem = {\r\n                            name: name,\r\n                            uri: url,\r\n                            properties: properties,\r\n                            measurements: measurements\r\n                        };\r\n                        _self.sendPageViewInternal(pageViewItem, properties);\r\n                    };\r\n                    if (hasWindow()) {\r\n                        _updateExceptionTracking(extConfig);\r\n                        _updateLocationChange(extConfig);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // resetting the initialized state because of failure\r\n                    _self.setInitialized(false);\r\n                    throw e;\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);\r\n                // Just register to remove all events associated with this namespace\r\n                eventOff(window, null, null, _evtNamespace);\r\n                _initDefaults();\r\n            };\r\n            function _populateDefaults(config) {\r\n                var ctx = createProcessTelemetryContext(null, config, _self.core);\r\n                var identifier = _self.identifier;\r\n                // load default values if specified\r\n                var defaults = _getDefaultConfig(config);\r\n                var extConfig = _self.config = ctx.getExtCfg(identifier);\r\n                if (defaults !== undefined) {\r\n                    objForEachKey(defaults, function (field, value) {\r\n                        // for each unspecified field, set the default value\r\n                        extConfig[field] = ctx.getConfig(identifier, field, value);\r\n                        if (extConfig[field] === undefined) {\r\n                            extConfig = value;\r\n                        }\r\n                    });\r\n                }\r\n                return extConfig;\r\n            }\r\n            function _updateBrowserLinkTracking(extConfig, config) {\r\n                _isBrowserLinkTrackingEnabled = extConfig.isBrowserLinkTrackingEnabled || config.isBrowserLinkTrackingEnabled;\r\n                _addDefaultTelemetryInitializers();\r\n            }\r\n            /**\r\n             * Log a page visit time\r\n             * @param    pageName    Name of page\r\n             * @param    pageVisitDuration Duration of visit to the page in milleseconds\r\n             */\r\n            function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {\r\n                var properties = { PageName: pageName, PageUrl: pageUrl };\r\n                _self.trackMetric({\r\n                    name: \"PageVisitTime\",\r\n                    average: pageVisitTime,\r\n                    max: pageVisitTime,\r\n                    min: pageVisitTime,\r\n                    sampleCount: 1\r\n                }, properties);\r\n            }\r\n            function _addDefaultTelemetryInitializers() {\r\n                if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {\r\n                    var browserLinkPaths_1 = [\"/browserLinkSignalR/\", \"/__browserLink/\"];\r\n                    var dropBrowserLinkRequests = function (envelope) {\r\n                        if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData.dataType) {\r\n                            var remoteData = envelope.baseData;\r\n                            if (remoteData) {\r\n                                for (var i = 0; i < browserLinkPaths_1.length; i++) {\r\n                                    if (remoteData.target && remoteData.target.indexOf(browserLinkPaths_1[i]) >= 0) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    };\r\n                    _self.addTelemetryInitializer(dropBrowserLinkRequests);\r\n                    _browserLinkInitializerAdded = true;\r\n                }\r\n            }\r\n            function _sendCORSException(exception, properties) {\r\n                var telemetryItem = createTelemetryItem(exception, Exception.dataType, Exception.envelopeType, _self.diagLog(), properties);\r\n                _self.core.track(telemetryItem);\r\n            }\r\n            function _updateExceptionTracking(extConfig) {\r\n                var _window = getWindow();\r\n                var locn = getLocation(true);\r\n                _disableExceptionTracking = extConfig.disableExceptionTracking;\r\n                if (!_disableExceptionTracking && !_autoExceptionInstrumented && !extConfig.autoExceptionInstrumented) {\r\n                    // We want to enable exception auto collection and it has not been done so yet\r\n                    _addHook(InstrumentEvent(_window, \"onerror\", {\r\n                        ns: _evtNamespace,\r\n                        rsp: function (callDetails, message, url, lineNumber, columnNumber, error) {\r\n                            if (!_disableExceptionTracking && callDetails.rslt !== true) {\r\n                                _self._onerror(Exception.CreateAutoException(message, url, lineNumber, columnNumber, error, callDetails.evt));\r\n                            }\r\n                        }\r\n                    }));\r\n                    _autoExceptionInstrumented = true;\r\n                }\r\n                _addUnhandledPromiseRejectionTracking(extConfig, _window, locn);\r\n            }\r\n            function _updateLocationChange(extConfig) {\r\n                var win = getWindow();\r\n                var locn = getLocation(true);\r\n                _enableAutoRouteTracking = extConfig.enableAutoRouteTracking === true;\r\n                /**\r\n                 * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n                 */\r\n                if (win && _enableAutoRouteTracking && hasHistory()) {\r\n                    var _history = getHistory();\r\n                    if (isFunction(_history.pushState) && isFunction(_history.replaceState) && typeof Event !== strUndefined) {\r\n                        _addHistoryListener(extConfig, win, _history, locn);\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n             */\r\n            function _addHistoryListener(extConfig, win, history, locn) {\r\n                function _popstateHandler() {\r\n                    if (_enableAutoRouteTracking) {\r\n                        _dispatchEvent(win, createDomEvent(extConfig.namePrefix + \"locationchange\"));\r\n                    }\r\n                }\r\n                function _locationChangeHandler() {\r\n                    // We always track the changes (if the handler is installed) to handle the feature being disabled between location changes\r\n                    if (_currUri) {\r\n                        _prevUri = _currUri;\r\n                        _currUri = locn && locn.href || \"\";\r\n                    }\r\n                    else {\r\n                        _currUri = locn && locn.href || \"\";\r\n                    }\r\n                    if (_enableAutoRouteTracking) {\r\n                        var properties = _self.core.getPlugin(PropertiesPluginIdentifier);\r\n                        if (properties) {\r\n                            var context = properties.plugin.context;\r\n                            if (context && context.telemetryTrace) {\r\n                                context.telemetryTrace.traceID = generateW3CId();\r\n                                var traceLocationName = \"_unknown_\";\r\n                                if (locn && locn.pathname) {\r\n                                    traceLocationName = locn.pathname + (locn.hash || \"\");\r\n                                }\r\n                                // This populates the ai.operation.name which has a maximum size of 1024 so we need to sanitize it\r\n                                context.telemetryTrace.name = dataSanitizeString(_self.diagLog(), traceLocationName);\r\n                            }\r\n                        }\r\n                        setTimeout((function (uri) {\r\n                            // todo: override start time so that it is not affected by autoRoutePVDelay\r\n                            _self.trackPageView({ refUri: uri, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0\r\n                        }).bind(this, _prevUri), _self.autoRoutePVDelay);\r\n                    }\r\n                }\r\n                if (!_historyListenerAdded) {\r\n                    _addHook(InstrumentEvent(history, \"pushState\", {\r\n                        ns: _evtNamespace,\r\n                        rsp: function () {\r\n                            if (_enableAutoRouteTracking) {\r\n                                _dispatchEvent(win, createDomEvent(extConfig.namePrefix + \"pushState\"));\r\n                                _dispatchEvent(win, createDomEvent(extConfig.namePrefix + \"locationchange\"));\r\n                            }\r\n                        }\r\n                    }));\r\n                    _addHook(InstrumentEvent(history, \"replaceState\", {\r\n                        ns: _evtNamespace,\r\n                        rsp: function () {\r\n                            if (_enableAutoRouteTracking) {\r\n                                _dispatchEvent(win, createDomEvent(extConfig.namePrefix + \"replaceState\"));\r\n                                _dispatchEvent(win, createDomEvent(extConfig.namePrefix + \"locationchange\"));\r\n                            }\r\n                        }\r\n                    }));\r\n                    eventOn(win, extConfig.namePrefix + \"popstate\", _popstateHandler, _evtNamespace);\r\n                    eventOn(win, extConfig.namePrefix + \"locationchange\", _locationChangeHandler, _evtNamespace);\r\n                    _historyListenerAdded = true;\r\n                }\r\n            }\r\n            function _addUnhandledPromiseRejectionTracking(extConfig, _window, _location) {\r\n                _enableUnhandledPromiseRejectionTracking = extConfig.enableUnhandledPromiseRejectionTracking === true;\r\n                if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {\r\n                    // We want to enable exception auto collection and it has not been done so yet\r\n                    _addHook(InstrumentEvent(_window, \"onunhandledrejection\", {\r\n                        ns: _evtNamespace,\r\n                        rsp: function (callDetails, error) {\r\n                            if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) { // handled could be typeof function\r\n                                _self._onerror(Exception.CreateAutoException(_getReason(error), _location ? _location.href : \"\", 0, 0, error, callDetails.evt));\r\n                            }\r\n                        }\r\n                    }));\r\n                    _autoUnhandledPromiseInstrumented = true;\r\n                    extConfig.autoUnhandledPromiseInstrumented = _autoUnhandledPromiseInstrumented;\r\n                }\r\n            }\r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity {LoggingSeverity} - The severity of the log message\r\n             * @param message {_InternalLogMessage} - The log message.\r\n             */\r\n            function _throwInternal(severity, msgId, msg, properties, isUserAct) {\r\n                _self.diagLog().throwInternal(severity, msgId, msg, properties, isUserAct);\r\n            }\r\n            function _initDefaults() {\r\n                _eventTracking = null;\r\n                _pageTracking = null;\r\n                _pageViewManager = null;\r\n                _pageViewPerformanceManager = null;\r\n                _pageVisitTimeManager = null;\r\n                _preInitTelemetryInitializers = null;\r\n                _isBrowserLinkTrackingEnabled = false;\r\n                _browserLinkInitializerAdded = false;\r\n                _enableAutoRouteTracking = false;\r\n                _historyListenerAdded = false;\r\n                _disableExceptionTracking = false;\r\n                _autoExceptionInstrumented = false;\r\n                _enableUnhandledPromiseRejectionTracking = false;\r\n                _autoUnhandledPromiseInstrumented = false;\r\n                // Counts number of trackAjax invocations.\r\n                // By default we only monitor X ajax call per view to avoid too much load.\r\n                // Default value is set in config.\r\n                // This counter keeps increasing even after the limit is reached.\r\n                _trackAjaxAttempts = 0;\r\n                // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n                var location = getLocation(true);\r\n                _prevUri = location && location.href || \"\";\r\n                _currUri = null;\r\n                _evtNamespace = null;\r\n            }\r\n            // For backward compatibility\r\n            objDefineAccessors(_self, \"_pageViewManager\", function () { return _pageViewManager; });\r\n            objDefineAccessors(_self, \"_pageViewPerformanceManager\", function () { return _pageViewPerformanceManager; });\r\n            objDefineAccessors(_self, \"_pageVisitTimeManager\", function () { return _pageVisitTimeManager; });\r\n            objDefineAccessors(_self, \"_evtNamespace\", function () { return \".\" + _evtNamespace; });\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AnalyticsPlugin.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AnalyticsPlugin.prototype.processTelemetry = function (env, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n     * @param   name    A string that identifies this event uniquely within the document.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a diagnostic message\r\n     * @param {ITraceTelemetry} trace\r\n     * @param ICustomProperties.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a numeric value that is not associated with a specific event. Typically\r\n     * used to send regular reports of performance indicators. To send single measurement, just\r\n     * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n     * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n     * and sending the resulting average at intervals\r\n     * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.\r\n     * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the\r\n     * portal. Defaults to empty.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page or other item was viewed.\r\n     * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param customProperties Additional data used to filter events and metrics. Defaults to empty.\r\n     * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageView = function (pageView, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n     * @param pageView Page view item to be sent\r\n     * @param properties Custom properties (Part C) that a user can add to the telemetry item\r\n     * @param systemProperties System level properties (Part A) that a user can add to the telemetry item\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewInternal = function (pageView, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @ignore INTERNAL ONLY\r\n     * @param pageViewPerformance\r\n     * @param properties\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Send browser performance metrics.\r\n     * @param pageViewPerformance\r\n     * @param customProperties\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackPage = function (name, url, properties, measurement) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n    * @ignore INTERNAL ONLY\r\n    * @param exception\r\n    * @param properties\r\n    * @param systemProperties\r\n    */\r\n    AnalyticsPlugin.prototype.sendExceptionInternal = function (exception, customProperties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception you have caught.\r\n     *\r\n     * @param {IExceptionTelemetry} exception   Object which contains exception to be sent\r\n     * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     *\r\n     * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Custom error handler for Application Insights Analytics\r\n     * @param {IAutoExceptionTelemetry} exception\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.Version = \"2.8.1\"; // Not currently used anywhere\r\n    AnalyticsPlugin.getDefaultConfig = _getDefaultConfig;\r\n    return AnalyticsPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { AnalyticsPlugin };\r\n//# sourceMappingURL=AnalyticsPlugin.js.map"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,wyDA4IM;AACN;AACA;AACA;AACA;AACA;AACA"}